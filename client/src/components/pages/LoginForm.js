import { Button, Form, Input } from 'antd'
import { useState } from 'react' // —Ö—É–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
import { AuthService } from '../../services/auth.service' // –∫–ª–∞—Å—Å —Å –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

const validateMessages = {
    required: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ!',
    string: { min: '–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤!' }
}

const authService = new AuthService()

function LoginForm(props) { // –∫–æ–º–ø–æ–Ω–µ–Ω—Ç React –¥–ª—è —Ñ–æ—Ä–º—ã –∏ –ª–æ–≥–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const [isLogin, setIsLogin] = useState(true) // —Ö—É–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const [authErrorMessage, setAuthErrorMessage] = useState('')
    const [form] = Form.useForm()

    async function auth() { // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        form
            .validateFields()
            .then(async () => {
                if (form.getFieldsValue().passwordRepeat) { // –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è, —Ç–æ —ç—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
                    const res = await authService.register(form.getFieldsValue())
                    if (res.success) {
                        props.setCurrentUserInfo(res.userInfo)
                        props.setIsLoggedIn()
                        window.location.href = '/'
                    } else {
                        setAuthErrorMessage('–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –µ—Å—Ç—å!')
                    }
                } else { // –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è, —ç—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                    const res = await authService.login(form.getFieldsValue())
                    if (res.success) {
                        props.setCurrentUserInfo(res.userInfo)
                        props.setIsLoggedIn()
                        window.location.href = '/'
                    } else {
                        setAuthErrorMessage('–ù–µ –≤–µ—Ä–Ω—ã–µ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!')
                    }
                }
            })
            .catch(err => {
                console.log('error', err)
            })
    }

    function changeAuthType() { //—Å–º–µ–Ω–∞ - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        setAuthErrorMessage('')
        setIsLogin(!isLogin)
        form.resetFields()
    }

    async function repeatPasswordFieldValidation(formRecord) { // –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
        const passwordField = formRecord.getFieldValue('password')
        const passwordRepeatField = formRecord.getFieldValue('passwordRepeat')
        if (passwordRepeatField && passwordField !== passwordRepeatField) {
            throw Error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!')
        }
    }

    return (
        <>
            <div className='login-page'>
                <div className='login-form-wrapper'>
                    <h1>{isLogin ? '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</h1>
                    <Form
                        labelAlign='left'
                        labelCol={{ span: 7 }}
                        wrapperCol={{ span: 18 }}
                        form={form}
                        validateMessages={validateMessages}
                    >
                        {!isLogin ? (
                            <>
                                <Form.Item
                                    label='–ò–º—è'
                                    name='first_name'
                                    rules={[{required: true}]}
                                >
                                    <Input allowClear />
                                </Form.Item>
                                <Form.Item
                                    label='–§–∞–º–∏–ª–∏—è'
                                    name='last_name'
                                    rules={[{required: true}]}
                                >
                                    <Input allowClear />
                                </Form.Item>
                                <Form.Item
                                    label='–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'
                                    name='date_of_birth'
                                    labelCol={{ span: 10 }}
                                    rules={[{ required: true }]}
                                >
                                    <Input
                                        type="date"
                                        onChange={e => form.setFieldsValue({ date_of_birth: e.target.value })}
                                        //value={form.getFieldValue('date_of_birth')}
                                    />
                                </Form.Item>
                            </>
                        ) : (
                            <></>
                        )}
                        <Form.Item
                            label='–≠–ª. –ø–æ—á—Ç–∞'
                            name='email'
                            rules={[
                                {
                                    required: true
                                }
                            ]}
                        >
                            <Input allowClear />
                        </Form.Item>
                        <Form.Item
                            label='–ü–∞—Ä–æ–ª—å'
                            name='password'
                            rules={[
                                {
                                    required: true,
                                    min: 8
                                }
                            ]}
                        >
                            <Input.Password allowClear />
                        </Form.Item>
                        {!isLogin ? (
                            <Form.Item
                                label='–ü–æ–≤—Ç–æ—Ä'
                                name='passwordRepeat'
                                rules={[
                                    {
                                        required: true
                                    },
                                    form => ({
                                        validator() {
                                            return repeatPasswordFieldValidation(form)
                                        }
                                    })
                                ]}
                            >
                                <Input.Password allowClear />
                            </Form.Item>
                        ) : (
                            <></>
                        )}
                    </Form>
                    {authErrorMessage ? <div className='auth-error-message'>{authErrorMessage}</div> : <></>}
                    <Button type='primary' onClick={auth} style={{ width: 200 }}>
                        {isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
                    </Button>
                    <p>
                        {isLogin ? '–ï—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã?ü§®' : '–ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –º–æ–∂–µ—Ç–µ –≤ –Ω–µ–≥–æ –≤–æ–π—Ç–∏ü§ìüëâ'}
                        <Button type='link' onClick={changeAuthType}>
                            {isLogin ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}
                        </Button>
                    </p>
                </div>
            </div>
        </>
    )
}

export default LoginForm
